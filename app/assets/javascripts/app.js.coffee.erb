# TODO:
# * Handle authorization
# * Organize CSS better

app = angular.module 'envelopes', ['ngRoute']
  .config ($routeProvider, $locationProvider) ->

    if window.history && window.history.pushState
      $locationProvider.html5Mode true

    $routeProvider
      .when "/envelopes/:envelopeId",
        templateUrl: '<%= asset_path('partials/envelope.html') %>'
        controller: 'EnvelopeCtrl'
        resolve:
          data: envCtrl.loadData

app.run ['$rootScope', ($rootScope) ->
  $rootScope.$on '$routeChangeStart', ->
    $rootScope.loading = true
  $rootScope.$on '$routeChangeSuccess', ->
    $rootScope.loading = false
  $rootScope.$on '$routeChangeError', (e, curr, prev, rejection) ->
    $rootScope.loading = false
    console.log 'route error', e, curr, prev, rejection
]

app.filter 'envelopeUrl', ->
  (envelope) ->
    name = envelope.name.toLowerCase().replace " ", "-"
    name = name.replace /[^a-zA-Z-]/, ""
    "/envelopes/#{envelope.id}-#{name}"


app.factory 'NotificationService', ['$rootScope', ($rootScope) ->

  notifications = []
  #notifications = [
  #  {title:'Oh boy!', message:'This is getting interesting.', useTimer:true, isDismissible:true},
  #  {title:'Oh snap!', message:'There was a problem loading transactions.', type:'danger', useTimer:true}
  #]

  get: ->
    notifications
  remove: (notification) ->
    index = notifications.indexOf notification
    notifications.splice index, 1 if index != -1
  add: (notification) ->
    notification.isDismissible = true unless notification.isDismissible == false
    notification.useTimer = true unless notification.useTimer == false
    notifications.push notification
]

app.controller 'GrowlController', ['$scope', 'NotificationService', ($scope, NotificationService) ->
  $scope.notifications = NotificationService.get()
]

app.directive 'growl', ['NotificationService', (NotificationService) ->
  templateUrl: '<%= asset_path('partials/growl.html') %>'
  scope:
    notification: '='
  link: (scope, element, attrs) ->
    n = scope.notification

    validAlertTypes = ['success', 'info', 'warning', 'danger']
    type = if validAlertTypes.indexOf(n.type) == -1 then 'info' else n.type
    element.addClass "growl alert alert-#{type}"

    scope.remove = ->
      NotificationService.remove(n)

    if n.useTimer
      whichTransitionEvent = ->
        el = document.createElement('fakeelement')
        transitions =
          'animation':'animationend'
          'OAnimation':'oAnimationEnd'
          'MozAnimation':'animationend'
          'WebkitAnimation':'webkitAnimationEnd'

        for t of transitions
          if el.style[t] != undefined
            return transitions[t]

      transitionEvent = whichTransitionEvent()

      element[0].addEventListener transitionEvent, ->
        scope.$apply ->
          scope.remove()
]

app.factory 'EnvelopeService', ['$http', '$q', 'NotificationService', ($http, $q, NotificationService) ->

  envelopesPromise = null
  getEnvelopes = ->
    return envelopesPromise if envelopesPromise

    envelopesPromise = $http.get('/envelopes.json')
      .error ->
        NotificationService.add
          type: 'danger'
          title: 'Oh snap!'
          message: 'There was a problem getting envelopes.'
      .then (response) ->
        data = response.data
        organized_envelopes = data[""]
        stack = data[""].slice() # Make a copy of the root-level array

        while stack.length
          env = stack.pop()
          if data[env.id]
            stack = stack.concat data[env.id]
            env.children = data[env.id]

        organized_envelopes

  findById = (id) ->
    getEnvelopes().then (envelopes) ->
      $q (resolve, reject) ->
        id = parseInt id
        stack = envelopes.slice()
        while stack.length
          envelope = stack.pop()
          if envelope.id == id
            resolve envelope
            return
          stack = stack.concat envelope.children if envelope.children

        reject "Unable to find envelope id: #{id}"

  all: getEnvelopes
  find: findById
]

app.factory 'TransactionService', ['$http', 'NotificationService', ($http, NotificationService) ->

  find: (options) ->
    envelopeId = options.envelopeId
    options =
      params:
        show_transfers: options.showTransfers
        start_date: options.startDate
        end_date: options.endDate

    $http.get("/envelopes/#{envelopeId}/transactions.json", options)
      .error ->
        NotificationService.add
          type: 'danger'
          title: 'Oh snap!'
          message: 'There was a problem getting transactions.'
      .then (response) ->
        response.data
]


app.directive 'leftPanel', ->
  templateUrl: '<%= asset_path('partials/left_panel.html') %>'
  controller: ['$scope', 'EnvelopeService', ($scope, EnvelopeService) ->
    EnvelopeService.all().then (envelopes) ->
      $scope.envelopes = envelopes
  ]


app.directive 'dateRangeControl', ->
  templateUrl: '<%= asset_path('partials/date_range.html') %>'
  scope:
    start: '@'
    end: '@'
    apply: '&'
  link: (scope, element, attrs) ->

    storageDateFormat = 'YYYY-MM-DD'
    visualDateFormat = 'll'
    supportedDateFormats = ['YYYY-MM-DD', 'YYYY-M-D', 'MMMM D, YYYY', 'M/D/YYYY', 'M-D-YYYY']

    appliedStart = ''
    appliedEnd = ''

    scope.getParams = ->
      startM = moment scope.start, supportedDateFormats
      endM = moment scope.end, supportedDateFormats

      startDate: startM.format(storageDateFormat)
      endDate: endM.format(storageDateFormat)

    # observe attribute changes (not isolate scope changes)
    attrs.$observe 'start', (newStart) ->
      appliedStart = newStart
      scope.start = moment(newStart, storageDateFormat).format visualDateFormat
      scope.hasChanged = false
      scope.hasError = false

    attrs.$observe 'end', (newEnd) ->
      appliedEnd = newEnd
      scope.end = moment(newEnd, storageDateFormat).format visualDateFormat
      scope.hasChanged = false
      scope.hasError = false

    validate = ->
      bothValid = true
      dateArray = [scope.start, scope.end]
      for i in [0..1]
        if dateArray[i] == 'today'
          dateArray[i] = moment().format visualDateFormat
        m = moment dateArray[i], supportedDateFormats
        bothValid = false unless m.isValid()
      scope.hasError = !bothValid

      if bothValid
        start = moment(dateArray[0], supportedDateFormats).format storageDateFormat
        end = moment(dateArray[1], supportedDateFormats).format storageDateFormat
        scope.hasChanged = start != appliedStart || end != appliedEnd

    scope.format = (varName) ->
      if scope[varName] == 'today'
        m = moment()
      else
        m = moment scope[varName], supportedDateFormats

      if m.isValid()
        scope[varName] = m.format(visualDateFormat)

    scope.$watch 'start', ->
      validate()

    scope.$watch 'end', ->
      validate()



envCtrl = app.controller 'EnvelopeCtrl', ['$scope', '$routeParams', '$rootScope', '$injector', 'EnvelopeService', 'data',
  ($scope, $routeParams, $rootScope, $injector, EnvelopeService, data) ->
    EnvelopeService.find($routeParams.envelopeId).then (envelope) ->
      parentId1 = envelope.parent_envelope_id
      if parentId1
        EnvelopeService.find(parentId1).then (parentEnvelope1) ->
          parentId2 = parentEnvelope1.parent_envelope_id
          if parentId2
            EnvelopeService.find(parentId2).then (parentEnvelope2) ->
              $scope.fullParentName = "#{parentEnvelope2.name}: #{parentEnvelope1.name}"
          else
            $scope.fullParentName = parentEnvelope1.name

      $scope.envelope = envelope
      $scope.transactions = data

      loadTransactions = ->
        $scope.txnsLoading = true
        $injector.invoke(envCtrl.loadData)
          .then (data) ->
            $scope.transactions = data
          .finally ->
            $scope.txnsLoading = false

      $scope.toggleTransfers = ->
        $rootScope.showTransfers = !$rootScope.showTransfers
        loadTransactions()

      $scope.applyDates = (startDate, endDate) ->
        $rootScope.startDate = startDate
        $rootScope.endDate = endDate
        loadTransactions()
]

# TODO: refactor this into a service/factory
envCtrl.loadData = ['$route', '$rootScope', 'TransactionService', ($route, $rootScope, TransactionService) ->
  envelopeId = $route.current.params.envelopeId

  if $rootScope.showTransfers == undefined
    $rootScope.showTransfers = false

  unless $rootScope.startDate
    $rootScope.startDate = moment().subtract(1, 'months').format 'YYYY-MM-DD'

  unless $rootScope.endDate
    $rootScope.endDate = moment().format 'YYYY-MM-DD'

  TransactionService.find
    envelopeId: envelopeId
    showTransfers: $rootScope.showTransfers
    startDate: $rootScope.startDate
    endDate: $rootScope.endDate
]

